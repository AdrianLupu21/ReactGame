{"version":3,"sources":["unstyledGame.js","serviceWorker.js","index.js"],"names":["Star","props","react_default","a","createElement","width","src","image","RowStar","createStars","row","i","_this","randomValue","push","unstyledGame_Star","this","React","Component","Number","onclick","handleClick","number","CheckEqual","onClick","winCondition","className","App","state","selectionNumber","Math","floor","random","handleTheClick","_this3","setState","checkEquality","event","alert","showNumbers","table","_loop","_this4","unstyledGame_RowStar","unstyledGame_CheckEqual","Boolean","window","location","hostname","match","ReactDOM","render","unstyledGame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAGMA,EAAO,SAACC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,GAAIC,IAAOL,EAAMM,SAG1BC,6MACLC,YAAc,WAEX,IADD,IAAIC,EAAM,GACDC,EAAG,EAAGA,EAAEC,EAAKX,MAAMY,YAAaF,IACvCD,EAAII,KAAKZ,EAAAC,EAAAC,cAACW,EAAD,CAAMR,MAAM,+EAEtB,OAAOG,2EAGR,OACER,EAAAC,EAAAC,cAAA,WACCY,KAAKP,sBAXWQ,IAAMC,WAgBtBC,EAAS,SAAAlB,GACd,OACEC,EAAAC,EAAAC,cAAA,UAAQgB,QAAWnB,EAAMoB,aAAcpB,EAAMqB,SAyB1CC,GAjBgBN,IAAMC,2LAmBzB,OACEhB,EAAAC,EAAAC,cAAA,UAAQoB,QAASR,KAAKf,MAAMwB,aAAcC,UAAU,gBAApD,YAHoBT,IAAMC,YAOzBS,6MACHC,MAAQ,CACNC,gBAAkB,EAClBhB,YAAYiB,KAAKC,MAAM,EAAED,KAAKE,SAAS,MAEtCC,eAAiB,SAACX,GAChBY,EAAKC,SAAS,CAACN,gBAAgBP,OAEjCc,cAAgB,SAACC,GACfH,EAAKN,MAAMC,iBAAmBK,EAAKN,MAAMf,aACxCyB,MAAM,WACNJ,EAAKC,SAAS,CAACtB,YAAYiB,KAAKC,MAAM,EAAED,KAAKE,SAAS,KACrDE,EAAKC,SAAS,CAACN,gBAAgB,KAEhCS,MAAM,gBAGZC,YAAc,WAEX,IADA,IAAIC,EAAQ,GADIC,EAAA,SAER9B,GACN6B,EAAM1B,KAAKZ,EAAAC,EAAAC,cAAA,UAAQoB,QAAU,kBAAMU,EAAKD,eAAetB,EAAE,KAAKA,EAAE,KAD1DA,EAAI,EAAGA,EAAE,EAAGA,IAAI8B,EAAhB9B,GAGR,OAAO6B,2EAGJ,IAAAE,EAAA1B,KACN,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,YACbxB,EAAAC,EAAAC,cAACuC,EAAD,CAAS9B,YAAcG,KAAKY,MAAMf,cAClCX,EAAAC,EAAAC,cAACwC,EAAD,CAAYnB,aAAc,kBAAIiB,EAAKN,oBAErClC,EAAAC,EAAAC,cAAA,WAAMY,KAAKY,MAAMC,iBACjB3B,EAAAC,EAAAC,cAAA,WAAMY,KAAKuB,uBAlCAtB,IAAMC,WA0DTS,GAnBIV,IAAMC,UAmBVS,GCxGKkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c7fec26b.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst Star = (props) =>{\r\n\treturn(\r\n  \t<img width={30} src = {props.image} />\r\n  );\r\n}\r\nclass RowStar extends React.Component{\r\n\tcreateStars = () => {\r\n  \tlet row = [];\r\n    for(let i =0; i<this.props.randomValue; i++){\r\n    \trow.push(<Star image=\"https://image.freepik.com/free-icon/pointed-star-silhouette_318-35987.jpg\"/>)\r\n    }\r\n    return row;\r\n  }\r\n  render(){\r\n  \treturn(\r\n    \t<div>\r\n    \t{this.createStars()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst Number = props =>{\r\n\treturn(\r\n  \t<button onclick = {props.handleClick}>{props.number}</button>\r\n  );\r\n}\r\nconst Selection = props =>{\r\n\treturn(\r\n  \t<button>{props.selection}</button>\r\n  );\r\n}\r\nclass Options extends React.Component{\r\n\tshowNumbers = () =>{\r\n  \tlet table = [];\r\n    for(let i = 0; i<10; i++){\r\n    \ttable.push(<Number  number = {i+1}/>);\r\n    }\r\n    return table;\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n        {this.showNumbers()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass CheckEqual extends React.Component{\r\n\trender(){\r\n  \treturn(\r\n    \t<button onClick={this.props.winCondition} className=\"firstButtons\">=</button>\r\n    );\r\n  };\r\n}\r\nclass App extends React.Component{\r\n  \tstate = {\r\n    \tselectionNumber : 0,\r\n    \trandomValue:Math.floor(8*Math.random()+1)\r\n    };\r\n      handleTheClick = (number)=>{\r\n        this.setState({selectionNumber:number})\r\n      };\r\n      checkEquality = (event) =>{\r\n  \t\t\tif(this.state.selectionNumber == this.state.randomValue){\r\n        \talert(\"You Win\");\r\n        \tthis.setState({randomValue:Math.floor(8*Math.random()+1)});\r\n          this.setState({selectionNumber:0});\r\n        }else{\r\n        \talert(\"Try again\");\r\n        }\r\n  \t\t};\r\n  \tshowNumbers = () =>{\r\n      let table = [];\r\n      for(let i = 0; i<9; i++){\r\n      \t\ttable.push(<button onClick ={() => this.handleTheClick(i+1)}>{i+1}</button>);\r\n      }\r\n      return table;\r\n  \t}\r\n\r\n\trender(){\r\n  \treturn(\r\n    \t<div>\r\n       <h3>Play my game</h3>\r\n      \t<div className=\"firstRow\">\r\n      \t  <RowStar randomValue ={this.state.randomValue}/>\r\n        \t<CheckEqual winCondition={()=>this.checkEquality()} />\r\n      \t</div>\r\n       <div>{this.state.selectionNumber}</div>\r\n       <div>{this.showNumbers()}</div>\r\n    \t</div>\r\n    );\r\n  }\r\n}\r\nclass Game extends React.Component{\r\n\tstate = {randomValue:Math.floor(8*Math.random()+1)}\r\n  checkEquality = (props) =>{\r\n  \tconsole.log(props.state.selectionNumber);\r\n  };\r\n\trender(){\r\n  \treturn(\r\n    \t<div>\r\n    \t\t<h3>Play my game</h3>\r\n      \t<div className=\"firstRow\">\r\n      \t  <RowStar randomValue ={this.state.randomValue}/>\r\n        \t<CheckEqual winCondition={this.checkEquality} />\r\n      \t</div>\r\n        < App />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n// ReactDOM.render(<App />, mountNode);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './unstyledGame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}